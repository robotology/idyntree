<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="ModelTestUtils_8h" kind="file" language="C++">
    <compoundname>ModelTestUtils.h</compoundname>
    <includes refid="Model_8h" local="no">iDynTree/Model.h</includes>
    <includes refid="FixedJoint_8h" local="no">iDynTree/FixedJoint.h</includes>
    <includes refid="RevoluteJoint_8h" local="no">iDynTree/RevoluteJoint.h</includes>
    <includes refid="RevoluteSO2Joint_8h" local="no">iDynTree/RevoluteSO2Joint.h</includes>
    <includes refid="PrismaticJoint_8h" local="no">iDynTree/PrismaticJoint.h</includes>
    <includes refid="SphericalJoint_8h" local="no">iDynTree/SphericalJoint.h</includes>
    <includes refid="FreeFloatingState_8h" local="no">iDynTree/FreeFloatingState.h</includes>
    <includes refid="LinkState_8h" local="no">iDynTree/LinkState.h</includes>
    <includes refid="TestUtils_8h" local="no">iDynTree/TestUtils.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <includes refid="IJoint_8h" local="yes">IJoint.h</includes>
    <includedby refid="Model_2ModelTestUtils_8h" local="no">iDynTree/Model/ModelTestUtils.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="1">
        <label>iDynTree/ModelTestUtils.h</label>
        <link refid="ModelTestUtils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceiDynTree">iDynTree</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7" prot="public" static="no" strong="no">
        <type>unsigned int</type>
        <name>JointTypes</name>
        <enumvalue id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7a3c08d0d44f61d98e21ccb9ec424423d9" prot="public">
          <name>JOINT_FIXED</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7a89707c27d3a57aa643323ca0666902dc" prot="public">
          <name>JOINT_REVOLUTE</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7ab384e38147a05edd9a4064e45bee473e" prot="public">
          <name>JOINT_PRISMATIC</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7a359e4c290649bb8c74b43d86489a98fc" prot="public">
          <name>JOINT_REVOLUTE_SO2</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ModelTestUtils_8h_1a2bcdae04682df042522f84e1d32573a7a9ebdbd2c8b1e85a49b05781cc821f088" prot="public">
          <name>JOINT_SPHERICAL</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bitfield enum for selecting joint types in random model generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="29" column="1" bodyfile="iDynTree/ModelTestUtils.h" bodystart="30" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ModelTestUtils_8h_1a58a0753df108d195a8c90ff75805b397" prot="public" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int iDynTree::SIMPLE_JOINT_TYPES</definition>
        <argsstring></argsstring>
        <name>SIMPLE_JOINT_TYPES</name>
        <initializer>= JOINT_FIXED | JOINT_REVOLUTE | JOINT_PRISMATIC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="39" column="20" bodyfile="iDynTree/ModelTestUtils.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ModelTestUtils_8h_1a839997025ffcdd75bf67981792b456aa" prot="public" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int iDynTree::ALL_JOINT_TYPES</definition>
        <argsstring></argsstring>
        <name>ALL_JOINT_TYPES</name>
        <initializer>= JOINT_FIXED | JOINT_REVOLUTE | JOINT_PRISMATIC | JOINT_REVOLUTE_SO2 | JOINT_SPHERICAL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="42" column="20" bodyfile="iDynTree/ModelTestUtils.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ModelTestUtils_8h_1ae3c9d8004d8849d347af71dfbbc998f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Link</type>
        <definition>Link iDynTree::getRandomLink</definition>
        <argsstring>()</argsstring>
        <name>getRandomLink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="44" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="44" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a8c8b8402523935bbb29f27cca71633ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::addRandomLinkToModel</definition>
        <argsstring>(Model &amp;model, std::string parentLink, std::string newLinkName, unsigned int allowedJointTypes=SIMPLE_JOINT_TYPES)</argsstring>
        <name>addRandomLinkToModel</name>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>parentLink</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>newLinkName</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>allowedJointTypes</declname>
          <defval>SIMPLE_JOINT_TYPES</defval>
        </param>
        <briefdescription>
<para>Add a random link with random model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="69" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="69" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1abbc9efd0eed3caf7826a0f67056972f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::addRandomAdditionalFrameToModel</definition>
        <argsstring>(Model &amp;model, std::string parentLink, std::string newFrameName)</argsstring>
        <name>addRandomAdditionalFrameToModel</name>
        <param>
          <type>Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>parentLink</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>newFrameName</declname>
        </param>
        <briefdescription>
<para>Add a random additional frame to a model model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="159" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a6480b737c82af8b72b95857960254bad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LinkIndex</type>
        <definition>LinkIndex iDynTree::getRandomLinkIndexOfModel</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>getRandomLinkIndexOfModel</name>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="164" column="18" bodyfile="iDynTree/ModelTestUtils.h" bodystart="164" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a75223c9a86126d90e70857cc48ff302e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::getRandomLinkOfModel</definition>
        <argsstring>(const Model &amp;model)</argsstring>
        <name>getRandomLinkOfModel</name>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="171" column="20" bodyfile="iDynTree/ModelTestUtils.h" bodystart="171" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a2f8e6bff5b6a359c5bb88792dde90ac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::int2string</definition>
        <argsstring>(int i)</argsstring>
        <name>int2string</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="178" column="20" bodyfile="iDynTree/ModelTestUtils.h" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a6be6dbbfd7e26ec48860775137fe7fd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model</type>
        <definition>Model iDynTree::getRandomModel</definition>
        <argsstring>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10, unsigned int allowedJointTypes=SIMPLE_JOINT_TYPES)</argsstring>
        <name>getRandomModel</name>
        <param>
          <type>unsigned int</type>
          <declname>nrOfJoints</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nrOfAdditionalFrames</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>allowedJointTypes</declname>
          <defval>SIMPLE_JOINT_TYPES</defval>
        </param>
        <briefdescription>
<para>Generate a random model with the specified number of joints and additional frames. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nrOfJoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of joints to add to the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nrOfAdditionalFrames</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of additional frames to add (default: 10) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowedJointTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitfield specifying which joint types to include (default: Fixed, Revolute, Prismatic)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage:<itemizedlist>
<listitem><para>getRandomModel(5) // Uses default joint types (Fixed, Revolute, Prismatic)</para>
</listitem><listitem><para>getRandomModel(5, 10, JOINT_REVOLUTE | JOINT_PRISMATIC) // Only revolute and prismatic joints</para>
</listitem><listitem><para>getRandomModel(5, 10, JOINT_REVOLUTE) // Only revolute joints</para>
</listitem><listitem><para>getRandomModel(5, 10, SIMPLE_JOINT_TYPES | JOINT_REVOLUTE_SO2) // All joint types including SO2</para>
</listitem><listitem><para>getRandomModel(5, 10, ALL_JOINT_TYPES) // All available joint types including Spherical </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="201" column="14" bodyfile="iDynTree/ModelTestUtils.h" bodystart="201" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a20caf6d53482cbe05ce5715ccc1cc1a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model</type>
        <definition>Model iDynTree::getRandomChain</definition>
        <argsstring>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames=10, unsigned int allowedJointTypes=SIMPLE_JOINT_TYPES)</argsstring>
        <name>getRandomChain</name>
        <param>
          <type>unsigned int</type>
          <declname>nrOfJoints</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nrOfAdditionalFrames</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>allowedJointTypes</declname>
          <defval>SIMPLE_JOINT_TYPES</defval>
        </param>
        <briefdescription>
<para>Generate a random chain (sequential links) with the specified number of joints and additional frames. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nrOfJoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of joints to add to the chain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nrOfAdditionalFrames</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of additional frames to add (default: 10) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowedJointTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitfield specifying which joint types to include (default: Fixed, Revolute, Prismatic) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="231" column="14" bodyfile="iDynTree/ModelTestUtils.h" bodystart="231" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a5988c0a11fee2013e9ed68cf32147b95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model</type>
        <definition>Model iDynTree::getRandomModel</definition>
        <argsstring>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames, bool onlyRevoluteJoints)</argsstring>
        <name>getRandomModel</name>
        <param>
          <type>unsigned int</type>
          <declname>nrOfJoints</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nrOfAdditionalFrames</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyRevoluteJoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="257" column="14" bodyfile="iDynTree/ModelTestUtils.h" bodystart="257" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a3993eed2007bd777ecdc90d9cc10b4b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Model</type>
        <definition>Model iDynTree::getRandomChain</definition>
        <argsstring>(unsigned int nrOfJoints, size_t nrOfAdditionalFrames, bool onlyRevoluteJoints)</argsstring>
        <name>getRandomChain</name>
        <param>
          <type>unsigned int</type>
          <declname>nrOfJoints</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nrOfAdditionalFrames</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyRevoluteJoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="267" column="14" bodyfile="iDynTree/ModelTestUtils.h" bodystart="267" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1aff4391c79fb7cd4b59feed20b012d1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::getRandomJointPositions</definition>
        <argsstring>(VectorDynSize &amp;vec, const Model &amp;model)</argsstring>
        <name>getRandomJointPositions</name>
        <param>
          <type>VectorDynSize &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Get random joint position consistently with the limits of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>If the input vector has the wrong size, it will be resized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="280" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="280" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a72bed46cd07c0617f3f59ffbbb0823a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::getRandomInverseDynamicsInputs</definition>
        <argsstring>(FreeFloatingPos &amp;pos, FreeFloatingVel &amp;vel, FreeFloatingAcc &amp;acc, LinkNetExternalWrenches &amp;extWrenches)</argsstring>
        <name>getRandomInverseDynamicsInputs</name>
        <param>
          <type>FreeFloatingPos &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>FreeFloatingVel &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>FreeFloatingAcc &amp;</type>
          <declname>acc</declname>
        </param>
        <param>
          <type>LinkNetExternalWrenches &amp;</type>
          <declname>extWrenches</declname>
        </param>
        <briefdescription>
<para>Get random robot positions, velocities and accelerations and external wrenches to be given as an input to InverseDynamics. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function does not work properly with <ref refid="classiDynTree_1_1RevoluteSO2Joint" kindref="compound">RevoluteSO2Joint</ref> joints. Use the version that takes a <ref refid="classiDynTree_1_1Model" kindref="compound">Model</ref> parameter instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="320" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="320" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="ModelTestUtils_8h_1a6dfdcf7499dff86e08695945132e8b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::getRandomInverseDynamicsInputs</definition>
        <argsstring>(const Model &amp;model, FreeFloatingPos &amp;pos, FreeFloatingVel &amp;vel, FreeFloatingAcc &amp;acc, LinkNetExternalWrenches &amp;extWrenches)</argsstring>
        <name>getRandomInverseDynamicsInputs</name>
        <param>
          <type>const Model &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>FreeFloatingPos &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>FreeFloatingVel &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>FreeFloatingAcc &amp;</type>
          <declname>acc</declname>
        </param>
        <param>
          <type>LinkNetExternalWrenches &amp;</type>
          <declname>extWrenches</declname>
        </param>
        <briefdescription>
<para>Get random robot positions, velocities and accelerations and external wrenches to be given as an input to InverseDynamics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelTestUtils.h" line="353" column="13" bodyfile="iDynTree/ModelTestUtils.h" bodystart="353" bodyend="373"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="iDynTree/ModelTestUtils.h"/>
  </compounddef>
</doxygen>
