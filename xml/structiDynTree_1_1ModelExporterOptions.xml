<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structiDynTree_1_1ModelExporterOptions" kind="struct" language="C++" prot="public">
    <compoundname>iDynTree::ModelExporterOptions</compoundname>
    <includes local="no">iDynTree/ModelExporter.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1af9ebe6e5ba3d83f9f8bf82a793161e07" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string iDynTree::ModelExporterOptions::baseLink</definition>
        <argsstring></argsstring>
        <name>baseLink</name>
        <briefdescription>
<para>Specify the base link of the exported model. </para>
        </briefdescription>
        <detaileddescription>
<para>Differently from the <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> class, some file formats (such as the URDF) represent the multibody structure using a directed tree representation, for which it is necessary to explicitly specify a base link.</para>
<para>If this string is empty (default value), the default base link contained in the model will be used.</para>
<para>Default value: &quot;&quot;. Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="35" column="17" bodyfile="iDynTree/ModelExporter.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1a776c8f98ae5c58e038e3a1962f9fd318" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool iDynTree::ModelExporterOptions::exportFirstBaseLinkAdditionalFrameAsFakeURDFBase</definition>
        <argsstring></argsstring>
        <name>exportFirstBaseLinkAdditionalFrameAsFakeURDFBase</name>
        <briefdescription>
<para>Select if the first additional frame of the base link is exported as fake base link. </para>
        </briefdescription>
        <detaileddescription>
<para>The URDF exporter by default exports the first additional frame of the base link as a parent &quot;fake&quot; link to the actual base link, as a workaround for <ulink url="https://github.com/ros/kdl_parser/issues/27">https://github.com/ros/kdl_parser/issues/27</ulink>). By setting this option to false, is possible to disable this behaviour, for more info see <ref refid="classiDynTree_1_1ModelExporter" kindref="compound">iDynTree::ModelExporter</ref> docs. This option is ignored in non-URDF exporter.</para>
<para>Default value: true. Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="48" column="10" bodyfile="iDynTree/ModelExporter.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1acc4e1f0ecb310fca1c6c632ff52cbf8a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string iDynTree::ModelExporterOptions::robotExportedName</definition>
        <argsstring></argsstring>
        <name>robotExportedName</name>
        <briefdescription>
<para>Specify the robot name. </para>
        </briefdescription>
        <detaileddescription>
<para>Default: &quot;iDynTreeURDFModelExportModelName&quot;. Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="56" column="17" bodyfile="iDynTree/ModelExporter.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1a3f29164afc0150a7e4bb867bb4cd87ec" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; iDynTree::ModelExporterOptions::xmlBlobs</definition>
        <argsstring></argsstring>
        <name>xmlBlobs</name>
        <briefdescription>
<para>Specify the xml blobs to be exported at the end of the urdf as child of the robot tag. </para>
        </briefdescription>
        <detaileddescription>
<para>Default: {}. Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="63" column="17" bodyfile="iDynTree/ModelExporter.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1a17ae66ab30d56160af3d62f6ddf5afb3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool iDynTree::ModelExporterOptions::exportSphericalJointsAsThreeRevoluteJoints</definition>
        <argsstring></argsstring>
        <name>exportSphericalJointsAsThreeRevoluteJoints</name>
        <briefdescription>
<para>If true, spherical joints are exported as a series of three revolute joints with fake intermediate links having zero mass/inertia. </para>
        </briefdescription>
        <detaileddescription>
<para>If false, the spherical joint exported as a single joint (which is not supported in URDF). Default: true Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="72" column="10" bodyfile="iDynTree/ModelExporter.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1afeb5cf1d630be72c4890171893b8e2a1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string iDynTree::ModelExporterOptions::sphericalJointFakeLinkPrefix</definition>
        <argsstring></argsstring>
        <name>sphericalJointFakeLinkPrefix</name>
        <briefdescription>
<para>Prefix used for fake links created when exporting spherical joints. </para>
        </briefdescription>
        <detaileddescription>
<para>Default: &quot;spherical_fake_&quot; Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="79" column="17" bodyfile="iDynTree/ModelExporter.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structiDynTree_1_1ModelExporterOptions_1a6db5196cb4e5cdaa6a33b51bd837a195" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string iDynTree::ModelExporterOptions::sphericalJointRevoluteJointPrefix</definition>
        <argsstring></argsstring>
        <name>sphericalJointRevoluteJointPrefix</name>
        <briefdescription>
<para>Prefix used for revolute joints created when exporting spherical joints. </para>
        </briefdescription>
        <detaileddescription>
<para>Default: &quot;spherical_rev_&quot; Supported formats: urdf. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="86" column="17" bodyfile="iDynTree/ModelExporter.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structiDynTree_1_1ModelExporterOptions_1a5c7580ca273c3bc9c1311e9e4e5aff3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::ModelExporterOptions::ModelExporterOptions</definition>
        <argsstring>()</argsstring>
        <name>ModelExporterOptions</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/ModelExporter.h" line="91" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Options for the iDynTree exporter. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>T</label>
      </node>
      <node id="5">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>iDynTree::ModelExporterOptions</label>
        <link refid="structiDynTree_1_1ModelExporterOptions"/>
        <childnode refid="2" relation="usage">
          <edgelabel>baseLink</edgelabel>
          <edgelabel>robotExportedName</edgelabel>
          <edgelabel>sphericalJointFakeLinkPrefix</edgelabel>
          <edgelabel>sphericalJointRevoluteJointPrefix</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>xmlBlobs</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="iDynTree/ModelExporter.h" line="22" column="1" bodyfile="iDynTree/ModelExporter.h" bodystart="23" bodyend="93"/>
    <listofallmembers>
      <member refid="structiDynTree_1_1ModelExporterOptions_1af9ebe6e5ba3d83f9f8bf82a793161e07" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>baseLink</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1a776c8f98ae5c58e038e3a1962f9fd318" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>exportFirstBaseLinkAdditionalFrameAsFakeURDFBase</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1a17ae66ab30d56160af3d62f6ddf5afb3" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>exportSphericalJointsAsThreeRevoluteJoints</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1a5c7580ca273c3bc9c1311e9e4e5aff3c" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>ModelExporterOptions</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1acc4e1f0ecb310fca1c6c632ff52cbf8a" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>robotExportedName</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1afeb5cf1d630be72c4890171893b8e2a1" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>sphericalJointFakeLinkPrefix</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1a6db5196cb4e5cdaa6a33b51bd837a195" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>sphericalJointRevoluteJointPrefix</name></member>
      <member refid="structiDynTree_1_1ModelExporterOptions_1a3f29164afc0150a7e4bb867bb4cd87ec" prot="public" virt="non-virtual"><scope>iDynTree::ModelExporterOptions</scope><name>xmlBlobs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
