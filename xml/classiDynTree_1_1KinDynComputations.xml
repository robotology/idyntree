<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classiDynTree_1_1KinDynComputations" kind="class" language="C++" prot="public">
    <compoundname>iDynTree::KinDynComputations</compoundname>
    <includes local="no">iDynTree/KinDynComputations.h</includes>
      <sectiondef kind="user-defined">
      <header>Constructor/Destructor</header>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ae5a13daafda43dd17c1def2441a1bba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::KinDynComputations::KinDynComputations</definition>
        <argsstring>()</argsstring>
        <name>KinDynComputations</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="94" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ac59c62da13ca891d31e2fcf4c8307c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual iDynTree::KinDynComputations::~KinDynComputations</definition>
        <argsstring>()</argsstring>
        <name>~KinDynComputations</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="101" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Model loading and definition methods</header>
      <description><para>This methods are used to load the structure of your model. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a7bdd14859e449649042bd7e385472c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::loadRobotModel</definition>
        <argsstring>(const iDynTree::Model &amp;model)</argsstring>
        <name>loadRobotModel</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Load the model of the robot from a <ref refid="classiDynTree_1_1Model" kindref="compound">iDynTree::Model</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>the model to use in this class. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went ok, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1af5af27e0e4abc79c254f71d3bc0ce11c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
<para>Return true if the models for the robot have been correctly. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the class has been correctly configure, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="124" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1adf6af09df5e4d22c516fcbb59bbdd37c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setFrameVelocityRepresentation</definition>
        <argsstring>(const FrameVelocityRepresentation frameVelRepr) const</argsstring>
        <name>setFrameVelocityRepresentation</name>
        <param>
          <type>const FrameVelocityRepresentation</type>
          <declname>frameVelRepr</declname>
        </param>
        <briefdescription>
<para>Set the used FrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>FrameVelocityRepresentation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="131" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a4de3c793ac2cb9f2e4e06cce68b45d0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FrameVelocityRepresentation</type>
        <definition>FrameVelocityRepresentation iDynTree::KinDynComputations::getFrameVelocityRepresentation</definition>
        <argsstring>() const</argsstring>
        <name>getFrameVelocityRepresentation</name>
        <briefdescription>
<para>Get the used FrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classiDynTree_1_1KinDynComputations_1adf6af09df5e4d22c516fcbb59bbdd37c" kindref="member">setFrameVelocityRepresentation</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="137" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int iDynTree::KinDynComputations::getNrOfDegreesOfFreedom</definition>
        <argsstring>() const</argsstring>
        <name>getNrOfDegreesOfFreedom</name>
        <briefdescription>
<para>Get the number of internal degrees of freedom of the robot model used in the class. </para>
        </briefdescription>
        <detaileddescription>
<para>This return the <emphasis>internal</emphasis> degrees of freedom, because it does not include the eventual 6 degrees of freedom usually associated with the floating base.</para>
<para><simplesect kind="return"><para>the number of internal degrees of freedom of the model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="149" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ae3b1aee30864bed3a04cab2a86d736ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::KinDynComputations::getDescriptionOfDegreeOfFreedom</definition>
        <argsstring>(int dof_index) const</argsstring>
        <name>getDescriptionOfDegreeOfFreedom</name>
        <param>
          <type>int</type>
          <declname>dof_index</declname>
        </param>
        <briefdescription>
<para>Get a human readable description of a given internal degree of freedom of the robot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="155" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad5f1c26e1ac5452a35898273187a4093" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::KinDynComputations::getDescriptionOfDegreesOfFreedom</definition>
        <argsstring>() const</argsstring>
        <name>getDescriptionOfDegreesOfFreedom</name>
        <briefdescription>
<para>Get a human readable description of all the internal degrees of freedom of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a std::string containing the description of the internal degrees of freedom. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="162" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ac2f26f2439d05a037905959055552e42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int iDynTree::KinDynComputations::getNrOfLinks</definition>
        <argsstring>() const</argsstring>
        <name>getNrOfLinks</name>
        <briefdescription>
<para>Get the number of links contained in the model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="169" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a79b55ab2338ec73bf5175fd475f819b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int iDynTree::KinDynComputations::getNrOfFrames</definition>
        <argsstring>() const</argsstring>
        <name>getNrOfFrames</name>
        <briefdescription>
<para>Get the number of frames contained in the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The number of frames is always greater than or equal to the number of links because every link has one link reference frame associated. An arbitrary number of additional reference frames can associated to a given link. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="179" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a4b090dbfb91d4d9e8c98814778ec5abc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::KinDynComputations::getFloatingBase</definition>
        <argsstring>() const</argsstring>
        <name>getFloatingBase</name>
        <briefdescription>
<para>Get the name of the link considered as the floating base. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the name of the base link. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="186" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a76b26b97933c562c11e88ab3f50bc06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setFloatingBase</definition>
        <argsstring>(const std::string &amp;floatingBaseName)</argsstring>
        <name>setFloatingBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>floatingBaseName</declname>
        </param>
        <briefdescription>
<para>Set the link that is used as the floating base link. </para>
        </briefdescription>
        <detaileddescription>
<para>Currently supports only links. See <ulink url="https://github.com/robotology/idyntree/issues/422">https://github.com/robotology/idyntree/issues/422</ulink>. <simplesect kind="return"><para>true if all went well, false otherwise (for example if the link name was not found). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="194" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to access the underlyng model for the robot</header>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a681d578c2726dfc503029f2e44395f68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const Model&amp; iDynTree::KinDynComputations::model</definition>
        <argsstring>() const</argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="205" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa08d31891d0069f947c591344e941b84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classiDynTree_1_1Model" kindref="compound">Model</ref> &amp;</type>
        <definition>const Model&amp; iDynTree::KinDynComputations::getRobotModel</definition>
        <argsstring>() const</argsstring>
        <name>getRobotModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="206" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to obtain the sparity patterns of Jacobians and Hessians</header>
      <description><para><simplesect kind="note"><para>Sparsity patterns does not depend on the particular joint configuration. The only requirement is that the model has been loaded before </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a9c1ca970b8cf2f90c3ad3199b4534fec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobianSparsityPattern</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</argsstring>
        <name>getRelativeJacobianSparsityPattern</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobianPattern</declname>
        </param>
        <briefdescription>
<para>Returns the sparsity pattern of the relative Jacobian for the specified frames. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting matrix has the same size of the free floating Jacobian (6 x #DoFs) It is filled with only 0 and 1 with the following meaning:<itemizedlist>
<listitem><para>0: the element will always have 0 (for every robot configuration)</para>
</listitem><listitem><para>1: it exists a robot configuration such that the element have a value different from zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>refence frame for the Jacobian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outJacobianPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the Jacobian sparsity pattern </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success. False otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="229" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a3b75f92f8af4241e0e6c01564220921a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobianSparsityPattern</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; outJacobianPattern) const</argsstring>
        <name>getRelativeJacobianSparsityPattern</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobianPattern</declname>
        </param>
        <briefdescription>
<para>Returns the sparsity pattern of the relative Jacobian for the specified frames (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation) </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting matrix must have the same size of the free floating Jacobian (6 x #DoFs) It is filled with only 0 and 1 with the following meaning:<itemizedlist>
<listitem><para>0: the element will always have 0 (for every robot configuration)</para>
</listitem><listitem><para>1: it exists a robot configuration such that the element have a value different from zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>refence frame for the Jacobian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outJacobianPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> containing an already existing memory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>outJacobianPattern size must be 6 x #DoFs, it is not possible to resize a <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> element. </para>
</simplesect>
<simplesect kind="return"><para>true on success. False otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="248" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aff41a13a18c7b716ba0273440a6b96b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobianSparsityPattern</definition>
        <argsstring>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobianPattern) const</argsstring>
        <name>getFrameFreeFloatingJacobianSparsityPattern</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobianPattern</declname>
        </param>
        <briefdescription>
<para>Returns the sparsity pattern of the free floating Jacobian for the specified frame. </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting matrix has the same size of the free floating Jacobian (6 x 6 + #DoFs) It is filled with only 0 and 1 with the following meaning:<itemizedlist>
<listitem><para>0: the element will always have 0 (for every robot configuration)</para>
</listitem><listitem><para>1: it exists a robot configuration such that the element have a value different from zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outJacobianPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the Jacobian sparsity pattern </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success. False otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="264" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a17c3a2be18ebd68a9860ccfeac1b12b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobianSparsityPattern</definition>
        <argsstring>(const FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; outJacobianPattern) const</argsstring>
        <name>getFrameFreeFloatingJacobianSparsityPattern</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobianPattern</declname>
        </param>
        <briefdescription>
<para>Returns the sparsity pattern of the free floating Jacobian for the specified frame (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para>The resulting matrix has the same size of the free floating Jacobian (6 x (6 + #DoFs)) It is filled with only 0 and 1 with the following meaning:<itemizedlist>
<listitem><para>0: the element will always have 0 (for every robot configuration)</para>
</listitem><listitem><para>1: it exists a robot configuration such that the element have a value different from zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Jacobian frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outJacobianPattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the Jacobian sparsity pattern </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>outJacobianPattern size must be 6 x (#DoFs + 6), it is not possible to resize a <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> element. </para>
</simplesect>
<simplesect kind="return"><para>true on success. False otherwise </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="281" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to submit the input data for dynamics computations.</header>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a55c2232d8d0069af6a3e80d0f901be02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setJointPos</definition>
        <argsstring>(const iDynTree::VectorDynSize &amp;s)</argsstring>
        <name>setJointPos</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Set the (internal) joint positions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method sets only the joint positions, leaving all the other components of the state to their previous value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of dimension this-&gt;model().getNrOfPosCoords() . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="301" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1afa8862b110bf511a724028bf86eb42a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setJointPos</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; s)</argsstring>
        <name>setJointPos</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Set the (internal) joint positions. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation)</para>
<para><simplesect kind="note"><para>This method sets only the joint positions, leaving all the other components of the state to their previous value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of dimension this-&gt;model().getNrOfPosCoords() . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="311" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a3eee3e784003d54a13e0d4e709bd25db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setWorldBaseTransform</definition>
        <argsstring>(const iDynTree::Transform &amp;world_T_base)</argsstring>
        <name>setWorldBaseTransform</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref> &amp;</type>
          <declname>world_T_base</declname>
        </param>
        <briefdescription>
<para>Set the world base transform. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method sets only the world base transform, leaving all the other components of the state to their previous value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">world_T_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the homogeneous transformation that transforms position vectors expressed in the base reference frame in position frames expressed in the world reference frame (i.e. pos_world = world_T_base*pos_base . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="322" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aecb1ebd721765d1fdc2799b169e1b548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setWorldBaseTransform</definition>
        <argsstring>(iDynTree::MatrixView&lt; const double &gt; &amp;world_T_base)</argsstring>
        <name>setWorldBaseTransform</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; const double &gt; &amp;</type>
          <declname>world_T_base</declname>
        </param>
        <briefdescription>
<para>Set the world base transform (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method sets only the world base transform, leaving all the other components of the state to their previous value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">world_T_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the homogeneous transformation that transforms position vectors expressed in the base reference frame in position frames expressed in the world reference frame (i.e. pos_world = world_T_base*pos_base . </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="333" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a2e499491547624639c1765216e0d1f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setRobotState</definition>
        <argsstring>(const iDynTree::Transform &amp;world_T_base, const iDynTree::VectorDynSize &amp;s, const iDynTree::Twist &amp;base_velocity, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</argsstring>
        <name>setRobotState</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref> &amp;</type>
          <declname>world_T_base</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref> &amp;</type>
          <declname>base_velocity</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">iDynTree::Vector3</ref> &amp;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
<para>Set the state for the robot (floating base) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world_T_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the homogeneous transformation that transforms position vectors expressed in the base reference frame in position frames expressed in the world reference frame (i.e. pos_world = world_T_base*pos_base . </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <ref refid="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" kindref="member">getNrOfDegreesOfFreedom()</ref> joint positions (in rad) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The twist (linear/angular velocity) of the base, expressed with the convention specified by the used FrameVelocityConvention. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_dot</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <ref refid="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" kindref="member">getNrOfDegreesOfFreedom()</ref> joint velocities (in rad/sec) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>world_gravity</parametername>
</parameternamelist>
<parameterdescription>
<para>a 3d vector of the gravity acceleration vector, expressed in the world/inertial frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="346" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a991bbdf0c9d047562fc51e4993ce0b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setRobotState</definition>
        <argsstring>(iDynTree::MatrixView&lt; const double &gt; world_T_base, iDynTree::Span&lt; const double &gt; s, iDynTree::Span&lt; const double &gt; base_velocity, iDynTree::Span&lt; const double &gt; s_dot, iDynTree::Span&lt; const double &gt; world_gravity)</argsstring>
        <name>setRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; const double &gt;</type>
          <declname>world_T_base</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>base_velocity</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
<para>Set the state for the robot (floating base) (<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> and <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world_T_base</parametername>
</parameternamelist>
<parameterdescription>
<para>the 4x4 homogeneous transformation that transforms position vectors expressed in the base reference frame in position frames expressed in the world reference frame (i.e. pos_world = world_T_base*pos_base). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <ref refid="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" kindref="member">getNrOfDegreesOfFreedom()</ref> joint positions (in rad) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The twist (linear/angular velocity) of the base, expressed with the convention specified by the used FrameVelocityConvention. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_dot</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <ref refid="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" kindref="member">getNrOfDegreesOfFreedom()</ref> joint velocities (in rad/sec) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>world_gravity</parametername>
</parameternamelist>
<parameterdescription>
<para>a 3d vector of the gravity acceleration vector, expressed in the world/inertial frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> and the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="364" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1adee49677666e96c5d4253e919a7a1fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setRobotState</definition>
        <argsstring>(const iDynTree::VectorDynSize &amp;s, const iDynTree::VectorDynSize &amp;s_dot, const iDynTree::Vector3 &amp;world_gravity)</argsstring>
        <name>setRobotState</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">iDynTree::Vector3</ref> &amp;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
<para>Set the state for the robot (fixed base) Same as setRobotState, but with: world_T_base = <ref refid="classiDynTree_1_1Transform_1a706809fe4f1904e07634ed3d0c493fcd" kindref="member">iDynTree::Transform::Identity()</ref> base_velocity = <ref refid="classiDynTree_1_1SpatialVector_1ae2ae611372d0a0f53dd983e3598bcc58" kindref="member">iDynTree::Twist::Zero()</ref>;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="377" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1af4c08dceadecb5318f295bd8014735d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::setRobotState</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; s, iDynTree::Span&lt; const double &gt; s_dot, iDynTree::Span&lt; const double &gt; world_gravity)</argsstring>
        <name>setRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
<para>Set the state for the robot (fixed base) Same as setRobotState, but with: world_T_base = <ref refid="classiDynTree_1_1Transform_1a706809fe4f1904e07634ed3d0c493fcd" kindref="member">iDynTree::Transform::Identity()</ref> base_velocity = <ref refid="classiDynTree_1_1SpatialVector_1ae2ae611372d0a0f53dd983e3598bcc58" kindref="member">iDynTree::Twist::Zero()</ref>;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="389" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a24f941538023d1ed481839cf83274833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::getRobotState</definition>
        <argsstring>(iDynTree::Transform &amp;world_T_base, iDynTree::VectorDynSize &amp;s, iDynTree::Twist &amp;base_velocity, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</argsstring>
        <name>getRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref> &amp;</type>
          <declname>world_T_base</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref> &amp;</type>
          <declname>base_velocity</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">iDynTree::Vector3</ref> &amp;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="393" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a78398ff7a6a6726c1fd06e75fe2f32ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::getRobotState</definition>
        <argsstring>(iDynTree::VectorDynSize &amp;s, iDynTree::VectorDynSize &amp;s_dot, iDynTree::Vector3 &amp;world_gravity)</argsstring>
        <name>getRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">iDynTree::Vector3</ref> &amp;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="399" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa9a9e494786b116842ae332a451baaa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRobotState</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; world_T_base, iDynTree::Span&lt; double &gt; s, iDynTree::Span&lt; double &gt; base_velocity, iDynTree::Span&lt; double &gt; s_dot, iDynTree::Span&lt; double &gt; world_gravity)</argsstring>
        <name>getRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>world_T_base</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>base_velocity</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="403" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a86b6441113bddbd2d1ccc7a40f91bd91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::getRobotState</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; s, iDynTree::Span&lt; double &gt; s_dot, iDynTree::Span&lt; double &gt; world_gravity)</argsstring>
        <name>getRobotState</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>s_dot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>world_gravity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="409" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a68c9dbca3120164bc2f58f20d12d8dc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getWorldBaseTransform</definition>
        <argsstring>() const</argsstring>
        <name>getWorldBaseTransform</name>
        <briefdescription>
<para>Access the robot state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="417" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1afa212ccee1d3b3a1249cdeb1d03f245a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getWorldBaseTransform</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; world_T_base) const</argsstring>
        <name>getWorldBaseTransform</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>world_T_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="418" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a13d400bb68f3025be3a2cbc8aaebcff2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref></type>
        <definition>iDynTree::Twist iDynTree::KinDynComputations::getBaseTwist</definition>
        <argsstring>() const</argsstring>
        <name>getBaseTwist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="420" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a4d61da63a30ef1dc1f5a74e343933765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getBaseTwist</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; base_velocity) const</argsstring>
        <name>getBaseTwist</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>base_velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="421" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a39e8f4a9fbacf7f855ce049cab6a55c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getJointPos</definition>
        <argsstring>(iDynTree::VectorDynSize &amp;q) const</argsstring>
        <name>getJointPos</name>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aeeef49f5d918e2f00b71c62ea2658018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getJointPos</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; q) const</argsstring>
        <name>getJointPos</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Get the n joint position of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="430" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a11ebfc0466c7533d539313de604e9342" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getJointVel</definition>
        <argsstring>(iDynTree::VectorDynSize &amp;dq) const</argsstring>
        <name>getJointVel</name>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="432" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a22bedec949d813ae47d3eb15447633ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getJointVel</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; dq) const</argsstring>
        <name>getJointVel</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>dq</declname>
        </param>
        <briefdescription>
<para>Get the n joint velocity of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="439" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ab11da83e4066bb284aef5160ac28d18a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getModelVel</definition>
        <argsstring>(iDynTree::VectorDynSize &amp;nu) const</argsstring>
        <name>getModelVel</name>
        <param>
          <type><ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">iDynTree::VectorDynSize</ref> &amp;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Get the n+6 velocity of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtained by stacking the output of getBaseTwist and of getJointVel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="445" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a948a3ffa6dc49a289ea21cde2ef08a4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getModelVel</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; nu) const</argsstring>
        <name>getModelVel</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
<para>Get the n+6 velocity of the model. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtained by stacking the output of getBaseTwist and of getJointVel. <simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="453" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to get transform information between frames in the model, given the current state.</header>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a19d27b90072389664c33941f51a52c70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iDynTree::KinDynComputations::getFrameIndex</definition>
        <argsstring>(const std::string &amp;frameName) const</argsstring>
        <name>getFrameIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Get the index corresponding to a given frame name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a integer greater than or equal to zero if the frame exist, a negative integer otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="468" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad7d6d737d0bda18efbfa216dbf6b3063" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string iDynTree::KinDynComputations::getFrameName</definition>
        <argsstring>(const iDynTree::FrameIndex frameIndex) const</argsstring>
        <name>getFrameName</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <briefdescription>
<para>Get the frame name corresponding to a given frame index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="474" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aec6932d903d65f4a15617f5a593388ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getWorldTransform</definition>
        <argsstring>(const iDynTree::FrameIndex frameIndex)</argsstring>
        <name>getWorldTransform</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <briefdescription>
<para>Return the transform where the frame is the frame specified by frameIndex, and the reference frame is the world one (world_H_frame). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="482" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a5c638e17886f91f82c7915e182bae52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getWorldTransform</definition>
        <argsstring>(const iDynTree::FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; world_T_frame)</argsstring>
        <name>getWorldTransform</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>world_T_frame</declname>
        </param>
        <briefdescription>
<para>Return the transform where the frame is the frame specified by frameIndex, and the reference frame is the world one (world_T_frame). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world_T_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>a 4x4 matrix representing the homogeneous transformation that transforms position vectors expressed in the &apos;frame&apos; reference frame in position frames expressed in the world reference frame (i.e. pos_world = world_T_frame * pos_frame). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="493" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a51f0ccd05fd1e3cd596065c40ea49d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getWorldTransform</definition>
        <argsstring>(const std::string &amp;frameName)</argsstring>
        <name>getWorldTransform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Version of getWorldTransform where the frame is specified by name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For real time code use the method that takes an integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="502" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a50f02bed7aa3c4b4f561d073738f0e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getWorldTransform</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::MatrixView&lt; double &gt; world_T_frame)</argsstring>
        <name>getWorldTransform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>world_T_frame</declname>
        </param>
        <briefdescription>
<para>Version of getWorldTransform where the frame is specified by name (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> and <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For real time code use the method that takes an integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="511" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ab7bb03955ae5295ffdd9dddca830d9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classiDynTree_1_1MatrixFixSize" kindref="compound">iDynTree::Matrix4x4</ref> &gt;</type>
        <definition>std::vector&lt;iDynTree::Matrix4x4&gt; iDynTree::KinDynComputations::getWorldTransformsAsHomogeneous</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;frameNames)</argsstring>
        <name>getWorldTransformsAsHomogeneous</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>frameNames</declname>
        </param>
        <briefdescription>
<para>Return the transforms as a homogeneous matrices where the frame is specified by name in the frameNames vector, and the reference frame is the world one (world_H_frame). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="520" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1abed3cf7f42d954c3f16cea2a02a12ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getRelativeTransform</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex)</argsstring>
        <name>getRelativeTransform</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <briefdescription>
<para>Return the transform where the frame is the frame specified by frameIndex, and the reference frame is the one specified by refFrameIndex (refFrame_H_frame). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="528" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aede402a1bc403f16f3204748ec3463ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeTransform</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; refFrame_H_frame)</argsstring>
        <name>getRelativeTransform</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>refFrame_H_frame</declname>
        </param>
        <briefdescription>
<para>Return the transform where the frame is the frame specified by frameIndex, and the reference frame is the one specified by refFrameIndex (refFrame_H_frame). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFrame_H_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>a 4x4 matrix representing the homogeneous transformation that transforms position vectors expressed in the &apos;frame&apos; reference frame in position frames expressed in the &apos;refFrame&apos; reference frame (i.e. pos_refFrame = refFrame_T_frame * pos_frame). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> and the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="540" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad53211ac17c9540b8426aeb9436f6730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getRelativeTransformExplicit</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameOriginIndex, const iDynTree::FrameIndex refFrameOrientationIndex, const iDynTree::FrameIndex frameOriginIndex, const iDynTree::FrameIndex frameOrientationIndex)</argsstring>
        <name>getRelativeTransformExplicit</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameOriginIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameOrientationIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameOriginIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameOrientationIndex</declname>
        </param>
        <briefdescription>
<para>Return the transform between the frame with the origin of the frameOriginIndex and the orientation of frameOrientationIndex and the one with the origin of refFrameOriginIndex and the orientation of refFrameOrientationIndex . </para>
        </briefdescription>
        <detaileddescription>
<para>In symbols we return the (refFrameOrigin,refFrameOrientation)_H_(frameOrigin,frameORientation)</para>
<para>This is a variant of the getRelativeTransform in which the orientation and origin part of both side of the transform are explicited.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="557" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ab3d5d8f1ce44ad3add0aed6762d7160c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeTransformExplicit</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameOriginIndex, const iDynTree::FrameIndex refFrameOrientationIndex, const iDynTree::FrameIndex frameOriginIndex, const iDynTree::FrameIndex frameOrientationIndex, iDynTree::MatrixView&lt; double &gt; refFrameOrigin_refFrameOrientation_H_frameOrigin_frameORientation)</argsstring>
        <name>getRelativeTransformExplicit</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameOriginIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameOrientationIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameOriginIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameOrientationIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>refFrameOrigin_refFrameOrientation_H_frameOrigin_frameORientation</declname>
        </param>
        <briefdescription>
<para>Return the transform between the frame with the origin of the frameOriginIndex and the orientation of frameOrientationIndex and the one with the origin of refFrameOriginIndex and the orientation of refFrameOrientationIndex. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> and <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation)</para>
<para>In symbols we return the (refFrameOrigin,refFrameOrientation)_H_(frameOrigin,frameORientation)</para>
<para>This is a variant of the getRelativeTransform in which the orientation and origin part of both side of the transform are explicited.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="576" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a986af69045ecc8c26e69b5ed95b16e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Transform" kindref="compound">iDynTree::Transform</ref></type>
        <definition>iDynTree::Transform iDynTree::KinDynComputations::getRelativeTransform</definition>
        <argsstring>(const std::string &amp;refFrameName, const std::string &amp;frameName)</argsstring>
        <name>getRelativeTransform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>refFrameName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Version of getRelativeTransform where the frames are specified by name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For real time code use the method that takes an integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="588" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a3ae49a5b34a052964ae3a3412250bf9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeTransform</definition>
        <argsstring>(const std::string &amp;refFrameName, const std::string &amp;frameName, iDynTree::MatrixView&lt; double &gt; refFrame_H_frame)</argsstring>
        <name>getRelativeTransform</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>refFrameName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>refFrame_H_frame</declname>
        </param>
        <briefdescription>
<para>Version of getRelativeTransform where the frames are specified by name (<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> and <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> version). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>For real time code use the method that takes an integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="597" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to get frame velocity information given the current state.</header>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa1698aec457179f834a97c5f55a9238a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref></type>
        <definition>iDynTree::Twist iDynTree::KinDynComputations::getFrameVel</definition>
        <argsstring>(const std::string &amp;frameName)</argsstring>
        <name>getFrameVel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Return the frame velocity, with the convention specified by getFrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="610" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1abd995120b57de79c77bc5359645fb0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameVel</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::Span&lt; double &gt; twist)</argsstring>
        <name>getFrameVel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>twist</declname>
        </param>
        <briefdescription>
<para>Return the frame velocity, with the convention specified by getFrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> and <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation)</para>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="619" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa34ec2baaad71db424a67ed352566ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref></type>
        <definition>iDynTree::Twist iDynTree::KinDynComputations::getFrameVel</definition>
        <argsstring>(const FrameIndex frameIdx)</argsstring>
        <name>getFrameVel</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIdx</declname>
        </param>
        <briefdescription>
<para>Return the frame velocity, with the convention specified by getFrameVelocityRepresentation . </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="624" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1abdb56fa4e6daecf7a78ddccd286ce961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameVel</definition>
        <argsstring>(const FrameIndex frameIdx, iDynTree::Span&lt; double &gt; twist)</argsstring>
        <name>getFrameVel</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIdx</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>twist</declname>
        </param>
        <briefdescription>
<para>Return the frame velocity, with the convention specified by getFrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> and <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation)</para>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="633" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ae41acdeb26c2cc2b5d93f35c2dc0f3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref></type>
        <definition>Vector6 iDynTree::KinDynComputations::getFrameAcc</definition>
        <argsstring>(const std::string &amp;frameName, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</argsstring>
        <name>getFrameAcc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref> &amp;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>s_ddot</declname>
        </param>
        <briefdescription>
<para>Return the frame acceleration, with the convention specified by getFrameVelocityRepresentation . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>As this method recomputes the accelerations of all links for each call, it may be computationally expensive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="640" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aad6f28d4d1fdf93c1ffd74622f892ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameAcc</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::Span&lt; const double &gt; baseAcc, iDynTree::Span&lt; const double &gt; s_ddot, iDynTree::Span&lt; double &gt; frame_acceleration)</argsstring>
        <name>getFrameAcc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>frame_acceleration</declname>
        </param>
        <briefdescription>
<para>Return the frame acceleration, with the convention specified by getFrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> version)</para>
<para><simplesect kind="warning"><para>As this method recomputes the accelerations of all links for each call, it may be computationally expensive.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="653" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a543031fbdf0de765c40b4a47e7d8ef38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref></type>
        <definition>Vector6 iDynTree::KinDynComputations::getFrameAcc</definition>
        <argsstring>(const FrameIndex frameIdx, const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot)</argsstring>
        <name>getFrameAcc</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIdx</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref> &amp;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>s_ddot</declname>
        </param>
        <briefdescription>
<para>Return the frame acceleration, with the convention specified by getFrameVelocityRepresentation . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>As this method recomputes the accelerations of all links for each call, it may be computationally expensive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="663" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ae357ba9c71b3a30a7877e8cc7b4ddf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameAcc</definition>
        <argsstring>(const FrameIndex frameName, iDynTree::Span&lt; const double &gt; baseAcc, iDynTree::Span&lt; const double &gt; s_ddot, iDynTree::Span&lt; double &gt; frame_acceleration)</argsstring>
        <name>getFrameAcc</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>frame_acceleration</declname>
        </param>
        <briefdescription>
<para>Return the frame acceleration, with the convention specified by getFrameVelocityRepresentation. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> and <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> version)</para>
<para><simplesect kind="warning"><para>As this method recomputes the accelerations of all links for each call, it may be computationally expensive.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="676" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a27ae295bad4b1a53f7b26dc454edd52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobian</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::MatrixDynSize &amp;outJacobian)</argsstring>
        <name>getFrameFreeFloatingJacobian</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Compute the free floating jacobian for a given frame for the given representaiton. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="686" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ae189be17f94340a7c39c4f4fb525dc78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobian</definition>
        <argsstring>(const FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</argsstring>
        <name>getFrameFreeFloatingJacobian</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Compute the free floating jacobian for a given frame for the given representaiton. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="694" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1afb71b493c40274a519cf3e88068d1598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobian</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::MatrixView&lt; double &gt; outJacobian)</argsstring>
        <name>getFrameFreeFloatingJacobian</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Compute the free floating jacobian for a given frame for the given representaiton (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="703" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a02fcea58df81d920e93bb89c7e0946d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameFreeFloatingJacobian</definition>
        <argsstring>(const FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; outJacobian)</argsstring>
        <name>getFrameFreeFloatingJacobian</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Compute the free floating jacobian for a given frame for the given representaiton (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="712" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a394d5696059c00b5d2d7692e19333364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobian</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</argsstring>
        <name>getRelativeJacobian</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Return the relative Jacobian between the two frames. </para>
        </briefdescription>
        <detaileddescription>
<para>The Jacobian maps the internal robot shape with the relative velocity of refFrame w.r.t. frame expressed depending on the velocity representation, i.e <formula id="287">\[ v_{refFrame, frame} = J_{refFrame, frame}(s) \dot{s} \]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="727" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a9f5a0d7305591eb69d7e5ada3b68c098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobian</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, iDynTree::MatrixView&lt; double &gt; outJacobian)</argsstring>
        <name>getRelativeJacobian</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Return the relative Jacobian between the two frames (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para>The Jacobian maps the internal robot shape with the relative velocity of refFrame w.r.t. frame expressed depending on the velocity representation, i.e <formula id="287">\[ v_{refFrame, frame} = J_{refFrame, frame}(s) \dot{s} \]</formula></para>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="743" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad45015bd388547de9f694144c28f9316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobianExplicit</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, const iDynTree::FrameIndex expressedOriginFrameIndex, const iDynTree::FrameIndex expressedOrientationFrameIndex, iDynTree::MatrixDynSize &amp;outJacobian)</argsstring>
        <name>getRelativeJacobianExplicit</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>expressedOriginFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>expressedOrientationFrameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">iDynTree::MatrixDynSize</ref> &amp;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Return the relative Jacobian between the two frames. </para>
        </briefdescription>
        <detaileddescription>
<para>The Jacobian maps the internal robot shape with the relative velocity of refFrame w.r.t. frame expressed in the specified frame, i.e <formula id="288">\[ {}^{expressedOriginFrame, [expressedOrientationFrame]} \mathrm{v}_{refFrame, frame} = {}^{expressedOriginFrame, [expressedOrientationFrame]} J_{refFrame, frame}(s) \dot{s} \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>reference frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>considered frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expressedOriginFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>frame whose origin is used to express the Jacobian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expressedOrientationFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>frame whose orientation is used to express the Jacobian </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="762" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa45294f28000cad7c03d92a10f128165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getRelativeJacobianExplicit</definition>
        <argsstring>(const iDynTree::FrameIndex refFrameIndex, const iDynTree::FrameIndex frameIndex, const iDynTree::FrameIndex expressedOriginFrameIndex, const iDynTree::FrameIndex expressedOrientationFrameIndex, iDynTree::MatrixView&lt; double &gt; outJacobian)</argsstring>
        <name>getRelativeJacobianExplicit</name>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>refFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>expressedOriginFrameIndex</declname>
        </param>
        <param>
          <type>const iDynTree::FrameIndex</type>
          <declname>expressedOrientationFrameIndex</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>outJacobian</declname>
        </param>
        <briefdescription>
<para>Return the relative Jacobian between the two frames (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation) </para>
        </briefdescription>
        <detaileddescription>
<para>The Jacobian maps the internal robot shape with the relative velocity of refFrame w.r.t. frame expressed in the specified frame, i.e <formula id="288">\[ {}^{expressedOriginFrame, [expressedOrientationFrame]} \mathrm{v}_{refFrame, frame} = {}^{expressedOriginFrame, [expressedOrientationFrame]} J_{refFrame, frame}(s) \dot{s} \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>refFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>reference frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>considered frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expressedOriginFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>frame whose origin is used to express the Jacobian </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expressedOrientationFrameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>frame whose orientation is used to express the Jacobian </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="784" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a81f83749d1b0d4a7c68cfea82ef0491c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref></type>
        <definition>Vector6 iDynTree::KinDynComputations::getFrameBiasAcc</definition>
        <argsstring>(const FrameIndex frameIdx)</argsstring>
        <name>getFrameBiasAcc</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIdx</declname>
        </param>
        <briefdescription>
<para>Get the bias acceleration (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>acceleration not due to robot acceleration) of the frame velocity.</para>
<para>This term is usually called <formula id="289">$\dot{J} \nu$</formula> or <formula id="290">$\dot{J} \dot{q}$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="796" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a91225cb25cccbc32ea7842825c361d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameBiasAcc</definition>
        <argsstring>(const FrameIndex frameIdx, iDynTree::Span&lt; double &gt; bias_acc)</argsstring>
        <name>getFrameBiasAcc</name>
        <param>
          <type>const FrameIndex</type>
          <declname>frameIdx</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>bias_acc</declname>
        </param>
        <briefdescription>
<para>Get the bias acceleration (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>acceleration not due to robot acceleration) of the frame velocity.</para>
<para>This term is usually called <formula id="289">$\dot{J} \nu$</formula> or <formula id="290">$\dot{J} \dot{q}$</formula>. <simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="805" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1afa27f56b8951ecf8a3dd6edc34bd6482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref></type>
        <definition>Vector6 iDynTree::KinDynComputations::getFrameBiasAcc</definition>
        <argsstring>(const std::string &amp;frameName)</argsstring>
        <name>getFrameBiasAcc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Get the bias acceleration (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>acceleration not due to robot acceleration) of the frame velocity.</para>
<para>This term is usually called <formula id="289">$\dot{J} \nu$</formula> or <formula id="290">$\dot{J} \dot{q}$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="812" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a6ddeed39fa4aa8d67a7c6104addc4c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFrameBiasAcc</definition>
        <argsstring>(const std::string &amp;frameName, iDynTree::Span&lt; double &gt; bias_acc)</argsstring>
        <name>getFrameBiasAcc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>bias_acc</declname>
        </param>
        <briefdescription>
<para>Get the bias acceleration (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>acceleration not due to robot acceleration) of the frame velocity.</para>
<para>This term is usually called <formula id="289">$\dot{J} \nu$</formula> or <formula id="290">$\dot{J} \dot{q}$</formula>. <simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="821" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to get quantities related to centroidal dynamics.</header>
      <description><para>For a precise definition of the quantities computed by this methods, please check: S.</para>
<para>Traversaro, D. Pucci, F. Nori On the Base Frame Choice in Free-Floating Mechanical Systems and its Connection to Centroidal Dynamics <ulink url="https://traversaro.github.io/preprints/changebase.pdf">https://traversaro.github.io/preprints/changebase.pdf</ulink> </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1af779472793d193b57c4b1752f116a2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Position" kindref="compound">iDynTree::Position</ref></type>
        <definition>iDynTree::Position iDynTree::KinDynComputations::getCenterOfMassPosition</definition>
        <argsstring>()</argsstring>
        <name>getCenterOfMassPosition</name>
        <briefdescription>
<para>Return the center of mass position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the center of mass position, expressed in the world/inertial frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="843" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a453a6327824dd13ad1cc73f4a9edcfa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCenterOfMassPosition</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; pos)</argsstring>
        <name>getCenterOfMassPosition</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Return the center of mass position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="851" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a8e020a81ee67ae7eb4a288471f4d06ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">iDynTree::Vector3</ref></type>
        <definition>iDynTree::Vector3 iDynTree::KinDynComputations::getCenterOfMassVelocity</definition>
        <argsstring>()</argsstring>
        <name>getCenterOfMassVelocity</name>
        <briefdescription>
<para>Return the center of mass velocity, with respect to the world/inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is the time derivative of the quantity returned by getCenterOfMassPosition . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="859" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a7da8f9278dc90954e5c1a78c8d298511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCenterOfMassVelocity</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; vel)</argsstring>
        <name>getCenterOfMassVelocity</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
<para>Return the center of mass velocity, with respect to the world/inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is the time derivative of the quantity returned by getCenterOfMassPosition.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="869" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ac320cbe545e36b4d00c0f63f528e578b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCenterOfMassJacobian</definition>
        <argsstring>(MatrixDynSize &amp;comJacobian)</argsstring>
        <name>getCenterOfMassJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>comJacobian</declname>
        </param>
        <briefdescription>
<para>Return the center of mass jacobian, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>the <formula id="291">$3 \times (n+6)$</formula> matrix such that: <ref refid="classiDynTree_1_1KinDynComputations_1a8e020a81ee67ae7eb4a288471f4d06ca" kindref="member">getCenterOfMassVelocity()</ref> == <ref refid="classiDynTree_1_1KinDynComputations_1ac320cbe545e36b4d00c0f63f528e578b" kindref="member">getCenterOfMassJacobian()</ref> * <formula id="292">$ \nu$</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="876" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad06724860f4cc84c3b3665c9d396884a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCenterOfMassJacobian</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; comJacobian)</argsstring>
        <name>getCenterOfMassJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>comJacobian</declname>
        </param>
        <briefdescription>
<para>Return the center of mass jacobian, i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>the <formula id="291">$3 \times (n+6)$</formula> matrix such that: <ref refid="classiDynTree_1_1KinDynComputations_1a8e020a81ee67ae7eb4a288471f4d06ca" kindref="member">getCenterOfMassVelocity()</ref> == <ref refid="classiDynTree_1_1KinDynComputations_1ac320cbe545e36b4d00c0f63f528e578b" kindref="member">getCenterOfMassJacobian()</ref> * <formula id="293">$\nu $</formula>.</para>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="885" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a72b9d5992f44b1edca55d3067e6935fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector3</ref></type>
        <definition>Vector3 iDynTree::KinDynComputations::getCenterOfMassBiasAcc</definition>
        <argsstring>()</argsstring>
        <name>getCenterOfMassBiasAcc</name>
        <briefdescription>
<para>Return the center of mass bias acceleration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="890" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a96c5b14d641963cbe5d0a4e0c5e2ffd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCenterOfMassBiasAcc</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; acc)</argsstring>
        <name>getCenterOfMassBiasAcc</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>acc</declname>
        </param>
        <briefdescription>
<para>Return the center of mass bias acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="897" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a9eda2c0304b71cecb3e6d8f3a8523b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref></type>
        <definition>iDynTree::Twist iDynTree::KinDynComputations::getAverageVelocity</definition>
        <argsstring>()</argsstring>
        <name>getAverageVelocity</name>
        <briefdescription>
<para>Get the average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>the linear part of this twist correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED.</para>
</simplesect>
<simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="907" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a00aed880308de20d568f5e9e2638f286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getAverageVelocity</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; acc)</argsstring>
        <name>getAverageVelocity</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>acc</declname>
        </param>
        <briefdescription>
<para>Get the average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> implementation) The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>the linear part of this twist correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED. </para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="917" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad072dff147fe9cd88a09e687d7aad746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getAverageVelocityJacobian</definition>
        <argsstring>(MatrixDynSize &amp;avgVelocityJacobian)</argsstring>
        <name>getAverageVelocityJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>avgVelocityJacobian</declname>
        </param>
        <briefdescription>
<para>Get the jacobian of the average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>the linear part of this jacobian correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED.</para>
</simplesect>
<simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="927" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a210a38b01ff7aaf65e1a05dde26d7c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getAverageVelocityJacobian</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; avgVelocityJacobian)</argsstring>
        <name>getAverageVelocityJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>avgVelocityJacobian</declname>
        </param>
        <briefdescription>
<para>Get the jacobian of the average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation) The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>the linear part of this jacobian correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED.</para>
</simplesect>
<simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="939" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aae744a3efa13c67705ff9bed0f3cfa91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialInertia" kindref="compound">SpatialInertia</ref></type>
        <definition>SpatialInertia iDynTree::KinDynComputations::getRobotLockedInertia</definition>
        <argsstring>()</argsstring>
        <name>getRobotLockedInertia</name>
        <briefdescription>
<para>Get the robot locked inertia matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="return"><para>the locked inertia matrix of the robot. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="948" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a5fa53ab2ec3bef686b04d5502d249bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1Twist" kindref="compound">iDynTree::Twist</ref></type>
        <definition>iDynTree::Twist iDynTree::KinDynComputations::getCentroidalAverageVelocity</definition>
        <argsstring>()</argsstring>
        <name>getCentroidalAverageVelocity</name>
        <briefdescription>
<para>Get the centroidal average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is the average velocity returned by getAverageVelocity, but computed in the center of mass and with the orientation of the FrameVelocityRepresentation used. It we indicate with G the center of mass, it is expressed in (G[A]) for the mixed and inertial representation, and in (G[B]) for the base body-fixed representation.</para>
<para><simplesect kind="note"><para>the linear part of this twist correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED or INERTIAL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="961" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa71b0698ac6fb8477c828234e919826d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalAverageVelocity</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; acc)</argsstring>
        <name>getCentroidalAverageVelocity</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>acc</declname>
        </param>
        <briefdescription>
<para>Get the centroidal average velocity of the robot (<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> version). </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is the average velocity returned by getAverageVelocity, but computed in the center of mass and with the orientation of the FrameVelocityRepresentation used. It we indicate with G the center of mass, it is expressed in (G[A]) for the mixed and inertial representation, and in (G[B]) for the base body-fixed representation.</para>
<para><simplesect kind="note"><para>the linear part of this twist correspond to the getCenterOfMassVelocity only if the FrameVelocityConvention is set to MIXED or INERTIAL.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="976" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a8b6ff477fc86c5c4135ccb9359709877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalAverageVelocityJacobian</definition>
        <argsstring>(MatrixDynSize &amp;centroidalAvgVelocityJacobian)</argsstring>
        <name>getCentroidalAverageVelocityJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>centroidalAvgVelocityJacobian</declname>
        </param>
        <briefdescription>
<para>Get the jacobian of the centroidal average velocity of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>See the getCentroidalAverageVelocity method for more info on this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="983" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a6d3e6f8f94959fdc1588f5ea62ff28a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalAverageVelocityJacobian</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; centroidalAvgVelocityJacobian)</argsstring>
        <name>getCentroidalAverageVelocityJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>centroidalAvgVelocityJacobian</declname>
        </param>
        <briefdescription>
<para>Get the jacobian of the centroidal average velocity of the robot (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> version). </para>
        </briefdescription>
        <detaileddescription>
<para>See the getCentroidalAverageVelocity method for more info on this. <simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="992" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a3326cb327c1123b7e3c26f0b752a4196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialInertia" kindref="compound">SpatialInertia</ref></type>
        <definition>SpatialInertia iDynTree::KinDynComputations::getCentroidalRobotLockedInertia</definition>
        <argsstring>()</argsstring>
        <name>getCentroidalRobotLockedInertia</name>
        <briefdescription>
<para>Get the robot locked centroidal inertia matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (G[A]) or (G[B]) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="return"><para>the locked inertia centroidal matrix of the robot. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1001" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ad0399a36b1167706f317ce1e861c2ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialMomentum" kindref="compound">iDynTree::SpatialMomentum</ref></type>
        <definition>iDynTree::SpatialMomentum iDynTree::KinDynComputations::getLinearAngularMomentum</definition>
        <argsstring>()</argsstring>
        <name>getLinearAngularMomentum</name>
        <briefdescription>
<para>Get the linear and angular momentum of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1009" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a03e340549c18073cc187554d5529f59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getLinearAngularMomentum</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; spatialMomentum)</argsstring>
        <name>getLinearAngularMomentum</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>spatialMomentum</declname>
        </param>
        <briefdescription>
<para>Get the linear and angular momentum of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used. <simplesect kind="note"><para>spatialMomentum vector has to be a 6d-vector. The first 3 elements will contain the linear part, while the last 3 elements the angular part. </para>
</simplesect>
<simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1020" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a25056bf8ed51001c1fdb3a730f44d425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getLinearAngularMomentumJacobian</definition>
        <argsstring>(MatrixDynSize &amp;linAngMomentumJacobian)</argsstring>
        <name>getLinearAngularMomentumJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>linAngMomentumJacobian</declname>
        </param>
        <briefdescription>
<para>Get the linear and angular momentum jacobian of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1028" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ab47904194526d6bc56061f6b5735c455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getLinearAngularMomentumJacobian</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; linAngMomentumJacobian)</argsstring>
        <name>getLinearAngularMomentumJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>linAngMomentumJacobian</declname>
        </param>
        <briefdescription>
<para>Get the linear and angular momentum jacobian of the robot (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). </para>
        </briefdescription>
        <detaileddescription>
<para>The quantity is expressed in (B[A]), (A) or (B) depending on the FrameVelocityConvention used. <simplesect kind="note"><para>Implementation incomplete, please refrain to use until this warning has been removed. </para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1037" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ac2a4ff5c105f79ff46701ed827445c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1SpatialMomentum" kindref="compound">iDynTree::SpatialMomentum</ref></type>
        <definition>iDynTree::SpatialMomentum iDynTree::KinDynComputations::getCentroidalTotalMomentum</definition>
        <argsstring>()</argsstring>
        <name>getCentroidalTotalMomentum</name>
        <briefdescription>
<para>Get the centroidal (total) momentum of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>If G is the center of mass, this quantity is expressed in (G[A]), (G[A]) or (G[B]) depending on the FrameVelocityConvention used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1044" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a92fbb55b733db7850e5b305de93a565a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalTotalMomentum</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; spatial_momentum)</argsstring>
        <name>getCentroidalTotalMomentum</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>spatial_momentum</declname>
        </param>
        <briefdescription>
<para>Get the centroidal (total) momentum of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>If G is the center of mass, this quantity is expressed in (G[A]), (G[A]) or (G[B]) depending on the FrameVelocityConvention used.</para>
<para><simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1053" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a0550abe10700c803723c0ef68f212580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalTotalMomentumJacobian</definition>
        <argsstring>(MatrixDynSize &amp;centroidalTotalMomentumJacobian)</argsstring>
        <name>getCentroidalTotalMomentumJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>centroidalTotalMomentumJacobian</declname>
        </param>
        <briefdescription>
<para>Get the total centroidal momentum jacobian of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>If G is the center of mass, this quantity is expressed in (G[A]), (G[A]) or (G[B]) depending on the FrameVelocityConvention used. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">centroidalTotalMomentumJacobian</parametername>
</parameternamelist>
<parameterdescription>
<para>the (6) times (6+getNrOfDOFs()) output centroidal total momentum jacobian. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>If the chosen FrameVelocityRepresentation is MIXED_REPRESENTATION or INERTIAL_FIXED_REPRESENTATION, the function computes the Centroidal Momentum Matrix (CMM) introduced in <ulink url="https://doi.org/10.1109/IROS.2008.4650772">https://doi.org/10.1109/IROS.2008.4650772</ulink> . </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1066" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a336e26bd0eef654bc071b2df5a722caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getCentroidalTotalMomentumJacobian</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; centroidalTotalMomentumJacobian)</argsstring>
        <name>getCentroidalTotalMomentumJacobian</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>centroidalTotalMomentumJacobian</declname>
        </param>
        <briefdescription>
<para>Get the total centroidal momentum jacobian of the robot. </para>
        </briefdescription>
        <detaileddescription>
<para>If G is the center of mass, this quantity is expressed in (G[A]), (G[A]) or (G[B]) depending on the FrameVelocityConvention used (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> implementation). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">centroidalTotalMomentumJacobian</parametername>
</parameternamelist>
<parameterdescription>
<para>the (6) times (6+getNrOfDOFs()) output centroidal total momentum jacobian. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>If the chosen FrameVelocityRepresentation is MIXED_REPRESENTATION or INERTIAL_FIXED_REPRESENTATION, the function computes the Centroidal Momentum Matrix (CMM) introduced in <ulink url="https://doi.org/10.1109/IROS.2008.4650772">https://doi.org/10.1109/IROS.2008.4650772</ulink> . </para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1080" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Methods to get quantities related to unconstrained free floating equation of motions.</header>
      <description><para>This methods permits to compute several quantities related to free floating equation of methods.</para>
<para>Note that this equations needs to be coupled with a description of the interaction between the model and the enviroment (such as a contant model, a bilateral constraint on some links or by considering some external forces as inputs) to actually obtain a dynamical system description of the mechanical model evolution.</para>
<para>The equations of motion of a free floating mechanical system under the effect of a uniform gravitational field are: <formula id="294">\[ M(q) \dot{\nu} + C(q, \nu) \nu + G(q) = \begin{bmatrix} 0_{6\times1} \newline \tau \end{bmatrix} + \sum_{L \in \mathcal{L}} J_L^T \mathrm{f}_L^x \]</formula></para>
<para>where:</para>
<para><itemizedlist>
<listitem><para><formula id="295">$n_{PC}$</formula> is the value returned by <ref refid="classiDynTree_1_1Model_1a14bde5abaf794aa4160f09ba50c64c2e" kindref="member">Model::getNrOfPosCoords</ref>,</para>
</listitem><listitem><para><formula id="296">$n_{DOF}$</formula> is the value returned by <ref refid="classiDynTree_1_1Model_1aca35ec05d4b7358b38df769deb0513a6" kindref="member">Model::getNrOfDOFs</ref>,</para>
</listitem><listitem><para><formula id="297">$n_{L}$</formula> is the value returned by <ref refid="classiDynTree_1_1Model_1aca270a902d0b0328c0d8afb1727d2154" kindref="member">Model::getNrOfLinks</ref>,</para>
</listitem><listitem><para><formula id="298">$q \in \mathbb{R}^3 \times \textrm{SO}(3) \times \mathbb{R}^{n_{PC}}$</formula> is the robot position,</para>
</listitem><listitem><para><formula id="299">$\nu \in \mathbb{R}^{6+n_{DOF}}$</formula> is the robot velocity,</para>
</listitem><listitem><para><formula id="300">$\dot{\nu} \in \mathbb{R}^{6+n_{DOF}}$</formula> is the robot acceleration,</para>
</listitem><listitem><para><formula id="301">$M(q) \in \mathbb{R}^{(6+n_{DOF}) \times (6+n_{DOF})}$</formula> is the free floating mass matrix,</para>
</listitem><listitem><para><formula id="302">$C(q, \nu) \in \mathbb{R}^{(6+n_{DOF}) \times (6+n_{DOF})}$</formula> is the coriolis matrix,</para>
</listitem><listitem><para><formula id="303">$G(q) \in \mathbb{R}^{6+n_{DOF}}$</formula> is the vector of gravity generalized forces,</para>
</listitem><listitem><para><formula id="304">$\tau \in \mathbb{R}^6$</formula> is the vector of torques applied on the joint of the multibody model,</para>
</listitem><listitem><para><formula id="305">$\mathcal{L}$</formula> is the set of all the links contained in the multibody model,</para>
</listitem><listitem><para><formula id="306">$J_L \in \mathbb{R}^{6+n_{DOF}}$</formula> is the free floating jacobian of link <formula id="0">$L$</formula> as obtained by <ref refid="classiDynTree_1_1KinDynComputations_1a27ae295bad4b1a53f7b26dc454edd52b" kindref="member">KinDynComputations::getFrameFreeFloatingJacobian</ref>,</para>
</listitem><listitem><para><formula id="307">$\mathrm{f}_L^x$</formula> is the 6D force/torque applied by the enviroment on link <formula id="0">$L$</formula>.</para>
</listitem></itemizedlist>
</para>
<para>The precise definition of each quantity (in particular the part related to the base) actually depends on the choice of FrameVelocityRepresentation, specified with the setFrameVelocityRepresentation method. </para>
</description>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a8103b966509c9ef696d76b9e1221b16a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFreeFloatingMassMatrix</definition>
        <argsstring>(MatrixDynSize &amp;freeFloatingMassMatrix)</argsstring>
        <name>getFreeFloatingMassMatrix</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>freeFloatingMassMatrix</declname>
        </param>
        <briefdescription>
<para>Get the free floating mass matrix of the system. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="301">$M(q) \in \mathbb{R}^{(6+n_{DOF}) \times (6+n_{DOF})}$</formula>.</para>
<para>The mass matrix depends on the joint positions, specified by the setRobotState methods. If the chosen FrameVelocityRepresentation is MIXED_REPRESENTATION or INERTIAL_FIXED_REPRESENTATION, the mass matrix depends also on the base orientation with respect to the inertial frame, that is also set by the setRobotState methods.</para>
<para>For more details on the structure of the free floating mass matrix, please check: S. Traversaro, A. Saccon Multibody Dynamics Notation <ulink url="http://repository.tue.nl/849895">http://repository.tue.nl/849895</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">freeFloatingMassMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the (6+getNrOfDOFs()) times (6+getNrOfDOFs()) output mass matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1148" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aade6b7d911481ea0e3763587247cd896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::getFreeFloatingMassMatrix</definition>
        <argsstring>(iDynTree::MatrixView&lt; double &gt; freeFloatingMassMatrix)</argsstring>
        <name>getFreeFloatingMassMatrix</name>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixView" kindref="compound">iDynTree::MatrixView</ref>&lt; double &gt;</type>
          <declname>freeFloatingMassMatrix</declname>
        </param>
        <briefdescription>
<para>Get the free floating mass matrix of the system (<ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> version). </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="301">$M(q) \in \mathbb{R}^{(6+n_{DOF}) \times (6+n_{DOF})}$</formula>.</para>
<para>The mass matrix depends on the joint positions, specified by the setRobotState methods. If the chosen FrameVelocityRepresentation is MIXED_REPRESENTATION or INERTIAL_FIXED_REPRESENTATION, the mass matrix depends also on the base orientation with respect to the inertial frame, that is also set by the setRobotState methods.</para>
<para>For more details on the structure of the free floating mass matrix, please check: S. Traversaro, A. Saccon Multibody Dynamics Notation <ulink url="http://repository.tue.nl/849895">http://repository.tue.nl/849895</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">freeFloatingMassMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the (6+getNrOfDOFs()) times (6+getNrOfDOFs()) output mass matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1MatrixView" kindref="compound">MatrixView</ref> object should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1169" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a60870f0f43c035fc63527ad42394f963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::inverseDynamics</definition>
        <argsstring>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</argsstring>
        <name>inverseDynamics</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref> &amp;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkNetExternalWrenches</ref> &amp;</type>
          <declname>linkExtForces</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>baseForceAndJointTorques</declname>
        </param>
        <briefdescription>
<para>Compute the free floating inverse dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="308">$M(q) \dot{\nu} + C(q, \nu) \nu + G(q) - \sum_{L \in \mathcal{L}} J_L^T \mathrm{f}_L^x \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of baseAcc, the base part of baseForceAndJointTorques and of the elements of linkExtWrenches depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">baseAcc</parametername>
</parameternamelist>
<parameterdescription>
<para>the acceleration of the base link </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">s_ddot</parametername>
</parameternamelist>
<parameterdescription>
<para>the accelerations of the joints </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">linkExtForces</parametername>
</parameternamelist>
<parameterdescription>
<para>the external wrenches excerted by the environment on the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">baseForceAndJointTorques</parametername>
</parameternamelist>
<parameterdescription>
<para>the output generalized torques </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1187" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1abd0cffbfc42e25cee59bcb7d9f68138c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::inverseDynamics</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; baseAcc, iDynTree::Span&lt; const double &gt; s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques)</argsstring>
        <name>inverseDynamics</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkNetExternalWrenches</ref> &amp;</type>
          <declname>linkExtForces</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>baseForceAndJointTorques</declname>
        </param>
        <briefdescription>
<para>Compute the free floating inverse dynamics (<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> version). </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="308">$M(q) \dot{\nu} + C(q, \nu) \nu + G(q) - \sum_{L \in \mathcal{L}} J_L^T \mathrm{f}_L^x \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of baseAcc, the base part of baseForceAndJointTorques and of the elements of linkExtWrenches depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">baseAcc</parametername>
</parameternamelist>
<parameterdescription>
<para>the acceleration of the base link </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">s_ddot</parametername>
</parameternamelist>
<parameterdescription>
<para>the accelerations of the joints </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">linkExtForces</parametername>
</parameternamelist>
<parameterdescription>
<para>the external wrenches excerted by the environment on the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">baseForceAndJointTorques</parametername>
</parameternamelist>
<parameterdescription>
<para>the output generalized torques </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1209" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a4fda4e851c1817c520382741e7af6e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::inverseDynamicsWithInternalJointForceTorques</definition>
        <argsstring>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques, LinkInternalWrenches &amp;linkInternalWrenches)</argsstring>
        <name>inverseDynamicsWithInternalJointForceTorques</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref> &amp;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkNetExternalWrenches</ref> &amp;</type>
          <declname>linkExtForces</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>baseForceAndJointTorques</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkInternalWrenches</ref> &amp;</type>
          <declname>linkInternalWrenches</declname>
        </param>
        <briefdescription>
<para>This method is similar to inverseDynamics, but provides as an additional output the internal 6D force/torques (aka wrenches) excerted by the two links connected to each joint, in the linkInternalWrenches argument. </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>linkInternalWrenches</computeroutput> is a container of <formula id="297">$n_{L}$</formula> (number of links) 6D Force/Torques, one associated to each link. In particular, if the link <formula id="0">$L$</formula> is the link with index <formula id="0">$L$</formula> the element linkInternalWrenches(i) contains, depending on the choice of <computeroutput>FrameVelocityRepresentation</computeroutput>:</para>
<para><table rows="4" cols="2"><row>
<entry thead="yes" align='center'><para><computeroutput>FrameVelocityRepresentation</computeroutput>   </para>
</entry><entry thead="yes" align='center'><para><computeroutput>linkInternalWrenches(i)</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>MIXED_REPRESENTATION</computeroutput> (default)   </para>
</entry><entry thead="no" align='center'><para><formula id="309">$ {}_{L[A]} \mathrm{f}_{\lambda(L), L} $</formula>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>BODY_FIXED_REPRESENTATION</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><formula id="310">$ {}_{L} \mathrm{f}_{\lambda(L), L} $</formula>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>INERTIAL_FIXED_REPRESENTATION</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><formula id="311">$ {}_{A} \mathrm{f}_{\lambda(L), L} $</formula>   </para>
</entry></row>
</table>
</para>
<para>Where if <formula id="167">$C$</formula> is a given frame, <formula id="312">$ {}_{C} \mathrm{f}_{\lambda(L), L} $</formula> is the 6D force/torque that the parent link <formula id="313">$\lambda(L)$</formula> excerts on its child <formula id="0">$L$</formula> expressed in frame <formula id="167">$C$</formula>.</para>
<para><simplesect kind="warning"><para>Note that this definition strictly depends on the floating base specified in the <ref refid="classiDynTree_1_1KinDynComputations" kindref="compound">KinDynComputations</ref> instances, as given a link <formula id="0">$L$</formula>, its parent \lambda(L) depends on the choosen base link. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1234" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1adc2cb49455b673fd6bfc5b40d00eb695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::inverseDynamicsWithInternalJointForceTorques</definition>
        <argsstring>(iDynTree::Span&lt; const double &gt; baseAcc, iDynTree::Span&lt; const double &gt; s_ddot, const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;baseForceAndJointTorques, LinkInternalWrenches &amp;linkInternalWrenches)</argsstring>
        <name>inverseDynamicsWithInternalJointForceTorques</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; const double &gt;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkNetExternalWrenches</ref> &amp;</type>
          <declname>linkExtForces</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>baseForceAndJointTorques</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkInternalWrenches</ref> &amp;</type>
          <declname>linkInternalWrenches</declname>
        </param>
        <briefdescription>
<para>Variant of inverseDynamicsWithInternalJointForceTorques that takes <ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref> objects that point to already allocated memory as inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>See inverseDynamicsWithInternalJointForceTorques for the description of the input and output parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1244" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a36e267abacd5773178bae3c2b6c26faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::generalizedBiasForces</definition>
        <argsstring>(FreeFloatingGeneralizedTorques &amp;generalizedBiasForces)</argsstring>
        <name>generalizedBiasForces</name>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>generalizedBiasForces</declname>
        </param>
        <briefdescription>
<para>Compute the getNrOfDOFS()+6 vector of generalized bias (gravity+coriolis) forces. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="314">$C(q, \nu) \nu + G(q) \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of the base part of generalizedBiasForces depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">generalizedBiasForces</parametername>
</parameternamelist>
<parameterdescription>
<para>the output generalized bias forces </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1262" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1aa9de9b73d42371a0c8d9002d494ad808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::generalizedBiasForces</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; generalizedBiasForces)</argsstring>
        <name>generalizedBiasForces</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>generalizedBiasForces</declname>
        </param>
        <briefdescription>
<para>Compute the getNrOfDOFS()+6 vector of generalized bias (gravity+coriolis) forces. </para>
        </briefdescription>
        <detaileddescription>
<para>(<ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> version)</para>
<para>This method computes <formula id="314">$C(q, \nu) \nu + G(q) \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of the base part of generalizedBiasForces depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><simplesect kind="note"><para>generalizedBiasForces has to be a (6 + dofs)-d vector. The first 6 elements will contain the bias forces related to the system base, while the last dofs elements related to the joints.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1280" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a9033e15503c5befbd0d5107038ac37f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::generalizedGravityForces</definition>
        <argsstring>(FreeFloatingGeneralizedTorques &amp;generalizedGravityForces)</argsstring>
        <name>generalizedGravityForces</name>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>generalizedGravityForces</declname>
        </param>
        <briefdescription>
<para>Compute the getNrOfDOFS()+6 vector of generalized gravity forces. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="303">$G(q) \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of the base part of generalizedGravityForces depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">generalizedGravityForces</parametername>
</parameternamelist>
<parameterdescription>
<para>the output gravity generalized forces </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1294" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1ac7330ad350c6ede3ab55e906525c2328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::generalizedGravityForces</definition>
        <argsstring>(iDynTree::Span&lt; double &gt; generalizedGravityForces)</argsstring>
        <name>generalizedGravityForces</name>
        <param>
          <type><ref refid="classiDynTree_1_1Span" kindref="compound">iDynTree::Span</ref>&lt; double &gt;</type>
          <declname>generalizedGravityForces</declname>
        </param>
        <briefdescription>
<para>Compute the getNrOfDOFS()+6 vector of generalized gravity forces. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="303">$G(q) \in \mathbb{R}^{6+n_{DOF}}$</formula>.</para>
<para>The semantics of the base part of generalizedGravityForces depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><simplesect kind="note"><para>generalizedGravityForces has to be a (6 + dofs)-d vector. The first 6 elements will contain the bias forces related to the system base, while the last dofs elements related to the joints.</para>
</simplesect>
<simplesect kind="warning"><para>the <ref refid="classiDynTree_1_1Span" kindref="compound">Span</ref> objects should point an already existing memory. Memory allocation and resizing cannot be achieved with this kind of objects. </para>
</simplesect>
<simplesect kind="return"><para>true if all went well, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1312" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a5a30a1e975f9510ef1b8fa605d0c6c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::generalizedExternalForces</definition>
        <argsstring>(const LinkNetExternalWrenches &amp;linkExtForces, FreeFloatingGeneralizedTorques &amp;generalizedExternalForces)</argsstring>
        <name>generalizedExternalForces</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1LinkWrenches" kindref="compound">LinkNetExternalWrenches</ref> &amp;</type>
          <declname>linkExtForces</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1FreeFloatingGeneralizedTorques" kindref="compound">FreeFloatingGeneralizedTorques</ref> &amp;</type>
          <declname>generalizedExternalForces</declname>
        </param>
        <briefdescription>
<para>Compute the getNrOfDOFS()+6 vector of generalized external forces. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes <formula id="315">$ -\sum_{L \in \mathcal{L}} J_L^T \mathrm{f}_L^x \in \mathbb{R}^{6+n_{DOF}} $</formula>.</para>
<para><simplesect kind="warning"><para>Note that this method returns the <bold>negated</bold> sum of the product of jacobian and the external force, consistently with how the generalized external forces are computed in the <ref refid="classiDynTree_1_1KinDynComputations_1a60870f0f43c035fc63527ad42394f963" kindref="member">KinDynComputations::inverseDynamics</ref> method.</para>
</simplesect>
The semantics of the base part of generalizedExternalForces and of the elements of linkExtWrenches depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">generalizedExternalForces</parametername>
</parameternamelist>
<parameterdescription>
<para>the output external generalized forces </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1330" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a2945d5222c617680fc262ae01dca0f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool iDynTree::KinDynComputations::inverseDynamicsInertialParametersRegressor</definition>
        <argsstring>(const Vector6 &amp;baseAcc, const VectorDynSize &amp;s_ddot, MatrixDynSize &amp;baseForceAndJointTorquesRegressor)</argsstring>
        <name>inverseDynamicsInertialParametersRegressor</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorFixSize" kindref="compound">Vector6</ref> &amp;</type>
          <declname>baseAcc</declname>
        </param>
        <param>
          <type>const <ref refid="classiDynTree_1_1VectorDynSize" kindref="compound">VectorDynSize</ref> &amp;</type>
          <declname>s_ddot</declname>
        </param>
        <param>
          <type><ref refid="classiDynTree_1_1MatrixDynSize" kindref="compound">MatrixDynSize</ref> &amp;</type>
          <declname>baseForceAndJointTorquesRegressor</declname>
        </param>
        <briefdescription>
<para>Compute the free floating inverse dynamics as a linear function of inertial parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This methods computes the <formula id="316">$ Y(\dot{\nu}, \nu, q) \in \mathbb{R}^{ (6+n_{DOF}) \times (10n_{L}) } $</formula> matrix such that: <formula id="317">\[ Y(\dot{\nu}, \nu, q) \phi = M(q) \dot{\nu} + C(q, \nu) \nu + G(q) \]</formula></para>
<para>where <formula id="318">$\phi \in \mathbb{R}^{10n_{L}}$</formula> is the vector of inertial parameters returned by the <ref refid="classiDynTree_1_1Model_1a2c283e000a2d6a5e86770d8616b7e18b" kindref="member">Model::getInertialParameters</ref> .</para>
<para>The semantics of baseAcc, the base part (first six rows) of baseForceAndJointTorquesRegressor depend of the chosen FrameVelocityRepresentation .</para>
<para>The state is the one given set by the setRobotState method.</para>
<para><simplesect kind="see"><para>iDynTree::InverseDynamicsInertialParametersRegressor for more info on the underlying algorithm.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">baseAcc</parametername>
</parameternamelist>
<parameterdescription>
<para>the acceleration of the base link </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">s_ddot</parametername>
</parameternamelist>
<parameterdescription>
<para>the accelerations of the joints </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">baseForceAndJointTorquesRegressor</parametername>
</parameternamelist>
<parameterdescription>
<para>The (6+model.getNrOfDOFs() X 10*model.<ref refid="classiDynTree_1_1KinDynComputations_1ac2f26f2439d05a037905959055552e42" kindref="member">getNrOfLinks()</ref>) inverse dynamics regressor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if all went well, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="1355" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiDynTree_1_1KinDynComputations_1afc1d7db5b6de3396fb46f7e6a6c2daaa" prot="private" static="no" mutable="no">
        <type>KinDynComputationsPrivateAttributes *</type>
        <definition>KinDynComputationsPrivateAttributes* iDynTree::KinDynComputations::pimpl</definition>
        <argsstring></argsstring>
        <name>pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="56" column="42" bodyfile="iDynTree/KinDynComputations.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a9acc0876f6f088e3d0e6cbabf3453d37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>iDynTree::KinDynComputations::KinDynComputations</definition>
        <argsstring>(const KinDynComputations &amp;other)</argsstring>
        <name>KinDynComputations</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1KinDynComputations" kindref="compound">KinDynComputations</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="59" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a63c2d2251202bfe8d5a5945b47a0932f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classiDynTree_1_1KinDynComputations" kindref="compound">KinDynComputations</ref> &amp;</type>
        <definition>KinDynComputations&amp; iDynTree::KinDynComputations::operator=</definition>
        <argsstring>(const KinDynComputations &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classiDynTree_1_1KinDynComputations" kindref="compound">KinDynComputations</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="60" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a1b87931ecbb1192dcbca6c1dff0d3f3b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::computeFwdKinematics</definition>
        <argsstring>()</argsstring>
        <name>computeFwdKinematics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="65" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a0f77386cadb313641227f34e5aa292c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::computeRawMassMatrixAndTotalMomentum</definition>
        <argsstring>()</argsstring>
        <name>computeRawMassMatrixAndTotalMomentum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="70" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a7c1e789c31554c990c34f72985fe76b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::computeBiasAccFwdKinematics</definition>
        <argsstring>()</argsstring>
        <name>computeBiasAccFwdKinematics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a6b53e9658acda7a8185e5d1bb0d36d31" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::invalidateCache</definition>
        <argsstring>()</argsstring>
        <name>invalidateCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classiDynTree_1_1KinDynComputations_1a4511bb4f2fcaf091a5b91123f42fa001" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iDynTree::KinDynComputations::resizeInternalDataStructures</definition>
        <argsstring>()</argsstring>
        <name>resizeInternalDataStructures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="iDynTree/KinDynComputations.h" line="81" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>High level stateful class wrapping several kinematics and dynamics algorithms. </para>
    </briefdescription>
    <detaileddescription>
<para>The kinematics dynamics computations class is an high level class stateful to access several algorithms related to kinematics and dynamics of free floating robot systems.</para>
<para>This class supports three possible convention to express the floating base information : the inertial, the body-fixed and the mixed convention. To get more info on this three conventions, check section II.C of On the Base Frame Choice in Free-Floating Mechanical Systems and its Connection to Centroidal Dynamics <ulink url="https://traversaro.github.io/preprints/changebase.pdf">https://traversaro.github.io/preprints/changebase.pdf</ulink> </para>
    </detaileddescription>
    <location file="iDynTree/KinDynComputations.h" line="53" column="1" bodyfile="iDynTree/KinDynComputations.h" bodystart="53" bodyend="1362"/>
    <listofallmembers>
      <member refid="classiDynTree_1_1KinDynComputations_1a7c1e789c31554c990c34f72985fe76b1" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>computeBiasAccFwdKinematics</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a1b87931ecbb1192dcbca6c1dff0d3f3b" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>computeFwdKinematics</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a0f77386cadb313641227f34e5aa292c5" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>computeRawMassMatrixAndTotalMomentum</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a36e267abacd5773178bae3c2b6c26faa" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>generalizedBiasForces</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa9de9b73d42371a0c8d9002d494ad808" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>generalizedBiasForces</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a5a30a1e975f9510ef1b8fa605d0c6c03" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>generalizedExternalForces</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a9033e15503c5befbd0d5107038ac37f9" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>generalizedGravityForces</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ac7330ad350c6ede3ab55e906525c2328" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>generalizedGravityForces</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a9eda2c0304b71cecb3e6d8f3a8523b6d" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getAverageVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a00aed880308de20d568f5e9e2638f286" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getAverageVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad072dff147fe9cd88a09e687d7aad746" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getAverageVelocityJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a210a38b01ff7aaf65e1a05dde26d7c46" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getAverageVelocityJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a13d400bb68f3025be3a2cbc8aaebcff2" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getBaseTwist</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a4d61da63a30ef1dc1f5a74e343933765" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getBaseTwist</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a72b9d5992f44b1edca55d3067e6935fe" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a96c5b14d641963cbe5d0a4e0c5e2ffd8" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ac320cbe545e36b4d00c0f63f528e578b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad06724860f4cc84c3b3665c9d396884a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1af779472793d193b57c4b1752f116a2fc" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassPosition</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a453a6327824dd13ad1cc73f4a9edcfa1" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassPosition</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a8e020a81ee67ae7eb4a288471f4d06ca" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a7da8f9278dc90954e5c1a78c8d298511" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCenterOfMassVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a5fa53ab2ec3bef686b04d5502d249bf6" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalAverageVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa71b0698ac6fb8477c828234e919826d" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalAverageVelocity</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a8b6ff477fc86c5c4135ccb9359709877" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalAverageVelocityJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a6d3e6f8f94959fdc1588f5ea62ff28a4" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalAverageVelocityJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a3326cb327c1123b7e3c26f0b752a4196" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalRobotLockedInertia</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ac2a4ff5c105f79ff46701ed827445c47" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalTotalMomentum</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a92fbb55b733db7850e5b305de93a565a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalTotalMomentum</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a0550abe10700c803723c0ef68f212580" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalTotalMomentumJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a336e26bd0eef654bc071b2df5a722caf" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getCentroidalTotalMomentumJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ae3b1aee30864bed3a04cab2a86d736ca" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getDescriptionOfDegreeOfFreedom</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad5f1c26e1ac5452a35898273187a4093" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getDescriptionOfDegreesOfFreedom</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a4b090dbfb91d4d9e8c98814778ec5abc" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFloatingBase</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ae41acdeb26c2cc2b5d93f35c2dc0f3ce" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aad6f28d4d1fdf93c1ffd74622f892ec1" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a543031fbdf0de765c40b4a47e7d8ef38" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ae357ba9c71b3a30a7877e8cc7b4ddf49" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a81f83749d1b0d4a7c68cfea82ef0491c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a91225cb25cccbc32ea7842825c361d54" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1afa27f56b8951ecf8a3dd6edc34bd6482" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a6ddeed39fa4aa8d67a7c6104addc4c79" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameBiasAcc</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a27ae295bad4b1a53f7b26dc454edd52b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ae189be17f94340a7c39c4f4fb525dc78" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1afb71b493c40274a519cf3e88068d1598" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a02fcea58df81d920e93bb89c7e0946d1" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aff41a13a18c7b716ba0273440a6b96b7" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobianSparsityPattern</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a17c3a2be18ebd68a9860ccfeac1b12b3" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameFreeFloatingJacobianSparsityPattern</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a19d27b90072389664c33941f51a52c70" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameIndex</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad7d6d737d0bda18efbfa216dbf6b3063" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameName</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa1698aec457179f834a97c5f55a9238a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1abd995120b57de79c77bc5359645fb0e4" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa34ec2baaad71db424a67ed352566ab8" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1abdb56fa4e6daecf7a78ddccd286ce961" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a4de3c793ac2cb9f2e4e06cce68b45d0b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFrameVelocityRepresentation</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a8103b966509c9ef696d76b9e1221b16a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFreeFloatingMassMatrix</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aade6b7d911481ea0e3763587247cd896" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getFreeFloatingMassMatrix</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a39e8f4a9fbacf7f855ce049cab6a55c2" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getJointPos</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aeeef49f5d918e2f00b71c62ea2658018" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getJointPos</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a11ebfc0466c7533d539313de604e9342" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getJointVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a22bedec949d813ae47d3eb15447633ff" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getJointVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad0399a36b1167706f317ce1e861c2ca0" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getLinearAngularMomentum</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a03e340549c18073cc187554d5529f59b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getLinearAngularMomentum</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a25056bf8ed51001c1fdb3a730f44d425" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getLinearAngularMomentumJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ab47904194526d6bc56061f6b5735c455" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getLinearAngularMomentumJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ab11da83e4066bb284aef5160ac28d18a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getModelVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a948a3ffa6dc49a289ea21cde2ef08a4b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getModelVel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aaf27395b392c1651654bf61d0107287c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getNrOfDegreesOfFreedom</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a79b55ab2338ec73bf5175fd475f819b5" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getNrOfFrames</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ac2f26f2439d05a037905959055552e42" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getNrOfLinks</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a394d5696059c00b5d2d7692e19333364" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a9f5a0d7305591eb69d7e5ada3b68c098" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobian</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad45015bd388547de9f694144c28f9316" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobianExplicit</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa45294f28000cad7c03d92a10f128165" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobianExplicit</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a9c1ca970b8cf2f90c3ad3199b4534fec" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobianSparsityPattern</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a3b75f92f8af4241e0e6c01564220921a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeJacobianSparsityPattern</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1abed3cf7f42d954c3f16cea2a02a12ba4" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aede402a1bc403f16f3204748ec3463ec" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a986af69045ecc8c26e69b5ed95b16e19" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a3ae49a5b34a052964ae3a3412250bf9f" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ad53211ac17c9540b8426aeb9436f6730" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransformExplicit</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ab3d5d8f1ce44ad3add0aed6762d7160c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRelativeTransformExplicit</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aae744a3efa13c67705ff9bed0f3cfa91" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotLockedInertia</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa08d31891d0069f947c591344e941b84" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotModel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a24f941538023d1ed481839cf83274833" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a78398ff7a6a6726c1fd06e75fe2f32ed" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aa9a9e494786b116842ae332a451baaa2" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a86b6441113bddbd2d1ccc7a40f91bd91" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a68c9dbca3120164bc2f58f20d12d8dc7" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldBaseTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1afa212ccee1d3b3a1249cdeb1d03f245a" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldBaseTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aec6932d903d65f4a15617f5a593388ab" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a5c638e17886f91f82c7915e182bae52e" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a51f0ccd05fd1e3cd596065c40ea49d8e" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a50f02bed7aa3c4b4f561d073738f0e15" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ab7bb03955ae5295ffdd9dddca830d9ea" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>getWorldTransformsAsHomogeneous</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a6b53e9658acda7a8185e5d1bb0d36d31" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>invalidateCache</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a60870f0f43c035fc63527ad42394f963" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>inverseDynamics</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1abd0cffbfc42e25cee59bcb7d9f68138c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>inverseDynamics</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a2945d5222c617680fc262ae01dca0f23" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>inverseDynamicsInertialParametersRegressor</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a4fda4e851c1817c520382741e7af6e9e" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>inverseDynamicsWithInternalJointForceTorques</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1adc2cb49455b673fd6bfc5b40d00eb695" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>inverseDynamicsWithInternalJointForceTorques</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1af5af27e0e4abc79c254f71d3bc0ce11c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>isValid</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a9acc0876f6f088e3d0e6cbabf3453d37" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>KinDynComputations</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ae5a13daafda43dd17c1def2441a1bba3" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>KinDynComputations</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a7bdd14859e449649042bd7e385472c31" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>loadRobotModel</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a681d578c2726dfc503029f2e44395f68" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>model</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a63c2d2251202bfe8d5a5945b47a0932f" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>operator=</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1afc1d7db5b6de3396fb46f7e6a6c2daaa" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>pimpl</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a4511bb4f2fcaf091a5b91123f42fa001" prot="private" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>resizeInternalDataStructures</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a76b26b97933c562c11e88ab3f50bc06b" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setFloatingBase</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1adf6af09df5e4d22c516fcbb59bbdd37c" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setFrameVelocityRepresentation</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a55c2232d8d0069af6a3e80d0f901be02" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setJointPos</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1afa8862b110bf511a724028bf86eb42a0" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setJointPos</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a2e499491547624639c1765216e0d1f38" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a991bbdf0c9d047562fc51e4993ce0b1f" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1adee49677666e96c5d4253e919a7a1fa4" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1af4c08dceadecb5318f295bd8014735d0" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setRobotState</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1a3eee3e784003d54a13e0d4e709bd25db" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setWorldBaseTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1aecb1ebd721765d1fdc2799b169e1b548" prot="public" virt="non-virtual"><scope>iDynTree::KinDynComputations</scope><name>setWorldBaseTransform</name></member>
      <member refid="classiDynTree_1_1KinDynComputations_1ac59c62da13ca891d31e2fcf4c8307c2d" prot="public" virt="virtual"><scope>iDynTree::KinDynComputations</scope><name>~KinDynComputations</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
