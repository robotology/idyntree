name: MATLAB Tests Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build-matlab-tests:
    name: '[matlab:${{ matrix.matlab_version }}:${{ matrix.os }}]'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]
        matlab_version: [R2022a, R2022b, R2023a]

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        environment-file: ci_env.yml
        channels: conda-forge

    - name: Setup MATLAB
      uses: matlab-actions/setup-matlab@v1
      with:
        release: ${{ matrix.matlab_version }}

    - name: Dependencies
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults

    # Additional dependencies useful only on Linux
    - name: Dependencies [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        conda install xorg-libxrandr libgl-devel

    # Workaround for https://github.com/robotology/idyntree/issues/1109
    - name: Dependencies [Conda/macOS]
      if: contains(matrix.os, 'macos')
      run: |
        conda install libblas=*=*netlib

    # workaround for https://github.com/robotology/robotology-superbuild/issues/64
    # and https://github.com/robotology/idyntree/issues/995
    - name: Do not use MATLAB's stdc++ to avoid incompatibilities with other libraries
      if: contains(matrix.os, 'ubuntu')
      run:
          echo "LD_PRELOAD=${CONDA_PREFIX}/lib/libstdc++.so.6" >> $GITHUB_ENV

    - name: Print used environment [Conda]
      shell: bash -l {0}
      run: |
        conda list
        env

    - name: Configure [Conda - Linux or  macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DCMAKE_BUILD_TYPE=Release -DMATLAB_FIND_DEBUG:BOOL=ON -DIDYNTREE_USES_MATLAB:BOOL=ON -DBUILD_TESTING:BOOL=ON -DIDYNTREE_USES_ASSIMP:BOOL=ON -DIDYNTREE_USES_IPOPT:BOOL=ON -DIDYNTREE_USES_IRRLICHT:BOOL=ON -DIDYNTREE_USES_YARP:BOOL=OFF -DIDYNTREE_USES_ICUB_MAIN:BOOL=OFF -DIDYNTREE_USES_OSQPEIGEN:BOOL=ON ..

    - name: Configure [Conda - Windows]
      shell: cmd /C CALL {0}
      if: contains(matrix.os, 'windows')
      run: |
        mkdir build
        cd build
        cmake  -GNinja -DCMAKE_INSTALL_PREFIX=%CONDA_PREFIX%\Library -DCMAKE_BUILD_TYPE=Release -DMATLAB_FIND_DEBUG:BOOL=ON -DIDYNTREE_USES_MATLAB:BOOL=ON -DBUILD_TESTING:BOOL=ON -DIDYNTREE_USES_ASSIMP:BOOL=ON -DIDYNTREE_USES_IPOPT:BOOL=ON -DIDYNTREE_USES_IRRLICHT:BOOL=ON -DIDYNTREE_USES_YARP:BOOL=OFF -DIDYNTREE_USES_ICUB_MAIN:BOOL=OFF -DIDYNTREE_USES_OSQPEIGEN:BOOL=ON ..

    - name: Build [Conda - Windows]
      shell: cmd /C CALL {0}
      if: contains(matrix.os, 'windows')
      run: |
        cd build
        cmake --build . --config Release
  
    - name: Build [Conda - Linux or  macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd build
        cmake --build . --config Release

    - name: Inspect libraries linked by iDynTreeMEX.mexa64 [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      run: |
        cd build
        ldd ./lib/iDynTreeMEX.mexa64

    - name: Test [Conda]
      run: |
        cd build
        # Only run matlab tests as the rest of tests are already run by other jobs
        ctest --output-on-failure -C Release -R "matlab" -VV .

    - name: Install [Conda]
      run: |
        cd build
        cmake --install . --config Release
